// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: user_message.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	CreateUser(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*CustomerResponse, error)
	GetUser(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*CustomerResponse, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*CustomersResponse, error)
	UpdateUser(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*CustomerResponse, error)
	DeleteUser(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error)
	ExistsCustomer(ctx context.Context, in *ExistsCustomerRequest, opts ...grpc.CallOption) (*ExistsCustomerResponse, error)
	GetByLogin(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	SendVerificationCode(ctx context.Context, in *PhoneVerification, opts ...grpc.CallOption) (*Empty, error)
	VerifyPhone(ctx context.Context, in *PhoneVerification, opts ...grpc.CallOption) (*PhoneVerification, error)
	UpdateSpecificFields(ctx context.Context, in *UpdateSpecificFieldsRequest, opts ...grpc.CallOption) (*Empty, error)
	GetSpecificFields(ctx context.Context, in *GetSpecificFieldsRequest, opts ...grpc.CallOption) (*GetSpecificFieldsResponse, error)
	EditCustomerPhoneNumber(ctx context.Context, in *EditCustomerPhoneNumberRequest, opts ...grpc.CallOption) (*Empty, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) CreateUser(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, "/user_service.CustomerService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetUser(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, "/user_service.CustomerService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*CustomersResponse, error) {
	out := new(CustomersResponse)
	err := c.cc.Invoke(ctx, "/user_service.CustomerService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateUser(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, "/user_service.CustomerService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) DeleteUser(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user_service.CustomerService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ExistsCustomer(ctx context.Context, in *ExistsCustomerRequest, opts ...grpc.CallOption) (*ExistsCustomerResponse, error) {
	out := new(ExistsCustomerResponse)
	err := c.cc.Invoke(ctx, "/user_service.CustomerService/ExistsCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetByLogin(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/user_service.CustomerService/GetByLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) SendVerificationCode(ctx context.Context, in *PhoneVerification, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user_service.CustomerService/SendVerificationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) VerifyPhone(ctx context.Context, in *PhoneVerification, opts ...grpc.CallOption) (*PhoneVerification, error) {
	out := new(PhoneVerification)
	err := c.cc.Invoke(ctx, "/user_service.CustomerService/VerifyPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateSpecificFields(ctx context.Context, in *UpdateSpecificFieldsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user_service.CustomerService/UpdateSpecificFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetSpecificFields(ctx context.Context, in *GetSpecificFieldsRequest, opts ...grpc.CallOption) (*GetSpecificFieldsResponse, error) {
	out := new(GetSpecificFieldsResponse)
	err := c.cc.Invoke(ctx, "/user_service.CustomerService/GetSpecificFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) EditCustomerPhoneNumber(ctx context.Context, in *EditCustomerPhoneNumberRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user_service.CustomerService/EditCustomerPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations must embed UnimplementedCustomerServiceServer
// for forward compatibility
type CustomerServiceServer interface {
	CreateUser(context.Context, *Customer) (*CustomerResponse, error)
	GetUser(context.Context, *GetCustomerRequest) (*CustomerResponse, error)
	Find(context.Context, *FindRequest) (*CustomersResponse, error)
	UpdateUser(context.Context, *Customer) (*CustomerResponse, error)
	DeleteUser(context.Context, *DeleteRequest) (*Empty, error)
	ExistsCustomer(context.Context, *ExistsCustomerRequest) (*ExistsCustomerResponse, error)
	GetByLogin(context.Context, *Customer) (*Customer, error)
	SendVerificationCode(context.Context, *PhoneVerification) (*Empty, error)
	VerifyPhone(context.Context, *PhoneVerification) (*PhoneVerification, error)
	UpdateSpecificFields(context.Context, *UpdateSpecificFieldsRequest) (*Empty, error)
	GetSpecificFields(context.Context, *GetSpecificFieldsRequest) (*GetSpecificFieldsResponse, error)
	EditCustomerPhoneNumber(context.Context, *EditCustomerPhoneNumberRequest) (*Empty, error)
	mustEmbedUnimplementedCustomerServiceServer()
}

// UnimplementedCustomerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (UnimplementedCustomerServiceServer) CreateUser(context.Context, *Customer) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCustomerServiceServer) GetUser(context.Context, *GetCustomerRequest) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedCustomerServiceServer) Find(context.Context, *FindRequest) (*CustomersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedCustomerServiceServer) UpdateUser(context.Context, *Customer) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedCustomerServiceServer) DeleteUser(context.Context, *DeleteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedCustomerServiceServer) ExistsCustomer(context.Context, *ExistsCustomerRequest) (*ExistsCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) GetByLogin(context.Context, *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByLogin not implemented")
}
func (UnimplementedCustomerServiceServer) SendVerificationCode(context.Context, *PhoneVerification) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationCode not implemented")
}
func (UnimplementedCustomerServiceServer) VerifyPhone(context.Context, *PhoneVerification) (*PhoneVerification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPhone not implemented")
}
func (UnimplementedCustomerServiceServer) UpdateSpecificFields(context.Context, *UpdateSpecificFieldsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpecificFields not implemented")
}
func (UnimplementedCustomerServiceServer) GetSpecificFields(context.Context, *GetSpecificFieldsRequest) (*GetSpecificFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecificFields not implemented")
}
func (UnimplementedCustomerServiceServer) EditCustomerPhoneNumber(context.Context, *EditCustomerPhoneNumberRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCustomerPhoneNumber not implemented")
}
func (UnimplementedCustomerServiceServer) mustEmbedUnimplementedCustomerServiceServer() {}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.CustomerService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CreateUser(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.CustomerService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetUser(ctx, req.(*GetCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.CustomerService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.CustomerService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateUser(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.CustomerService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).DeleteUser(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ExistsCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ExistsCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.CustomerService/ExistsCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ExistsCustomer(ctx, req.(*ExistsCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetByLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetByLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.CustomerService/GetByLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetByLogin(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_SendVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneVerification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).SendVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.CustomerService/SendVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).SendVerificationCode(ctx, req.(*PhoneVerification))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_VerifyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneVerification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).VerifyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.CustomerService/VerifyPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).VerifyPhone(ctx, req.(*PhoneVerification))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateSpecificFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpecificFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateSpecificFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.CustomerService/UpdateSpecificFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateSpecificFields(ctx, req.(*UpdateSpecificFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetSpecificFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecificFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetSpecificFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.CustomerService/GetSpecificFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetSpecificFields(ctx, req.(*GetSpecificFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_EditCustomerPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCustomerPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).EditCustomerPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.CustomerService/EditCustomerPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).EditCustomerPhoneNumber(ctx, req.(*EditCustomerPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _CustomerService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _CustomerService_GetUser_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _CustomerService_Find_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _CustomerService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _CustomerService_DeleteUser_Handler,
		},
		{
			MethodName: "ExistsCustomer",
			Handler:    _CustomerService_ExistsCustomer_Handler,
		},
		{
			MethodName: "GetByLogin",
			Handler:    _CustomerService_GetByLogin_Handler,
		},
		{
			MethodName: "SendVerificationCode",
			Handler:    _CustomerService_SendVerificationCode_Handler,
		},
		{
			MethodName: "VerifyPhone",
			Handler:    _CustomerService_VerifyPhone_Handler,
		},
		{
			MethodName: "UpdateSpecificFields",
			Handler:    _CustomerService_UpdateSpecificFields_Handler,
		},
		{
			MethodName: "GetSpecificFields",
			Handler:    _CustomerService_GetSpecificFields_Handler,
		},
		{
			MethodName: "EditCustomerPhoneNumber",
			Handler:    _CustomerService_EditCustomerPhoneNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_message.proto",
}
